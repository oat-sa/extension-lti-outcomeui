{"version":3,"mappings":"AAsBA,YACA,gBAIAA,oDACAC,mDACAC,gDAEAC,4CACAC,sBACAC,4DACAC,gDACA,IACAF,oCACA,YACAA,oBACA,CACAG,qDACA,+CACAA,iBACAA,kBACAC,oCAEA,EACAC,iEACA,kCACAC,iBAEA,EACA,EAGAH,sCAGAA,qBAGAA,iBAOAA,iDACAI,oBACAA,uCACAA,4CACA,oEACA,GACAC,2BACAD,+BACAJ,sBACA,GACAJ,gBACA,EACA,GAGAD,8CACAK,6BAEAJ,gBAEA,EACA,KAEAU,wCCxFAA,kKACAC,OACAC,UACAC,cACAC,QACAC,iBACA,CACA,aAmBA,qDACA,gBACAC,YACAC,cACAC,8BACA,mBAIA,+BACA,sBACA,EACA,CAQA,kDACA,6DACAC,4BACAC,yCACAC,gBACAC,wBACAC,4BAEAA,kBAEA,GACAC,0BAEAC,iBACA,CAQA,4CACA,UACA,8BAGA,uDACA,kCACA,+CACA,GACA,gDACA,MArEAC,0DACAC,gFAEAC,SACA,CACAjB,mEACAZ,8CACA8B,kBACA,EACA,CA8DA,OACAC,0BACAC,gBACAC,yCACAC,qCACAC,sCAEAH,KACAA,QACAI,0BACAF,8BACAC,uBACA,EAEA,qBAEAE,uDACArB,iCACAsB,cACAC,YACAC,kBACAX,OACA,EACA,EACA,CACA,CACA,GAEAlB,MC/GA,mCACA8B,qBACAC,SACAC,4DACA,CACA,CACA,GCLAhC,+DACAN,MCFA","names":["loaderScript","configUrl","bundle","loadController","controllerOptions","controllerPath","params","window","controller","document","startController","bundles","require","define","module","urlHelper","loggerFactory","request","previewerFactory","url","method","data","file","requestFileContent","then","fileData","response","catch","Promise","logger","dataUrl","plugins","category","start","uri","resultIdentifier","itemDefinition","deliveryUri","resultId","refineItemState","view","fullPage","hideActionBars","ItemResultPreviewer","actions","preview"],"sources":["../../loader/bootstrap.js","../controller/ItemResultPreviewer/itemResultPreviewer.js","../controller/routes.js","module-create.js","/github/workspace/tao/views/build/config-wrap-end-default.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Bootstrap the app, start the entry controller\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\n(function(){\n    'use strict';\n\n\n\n    var loaderScript = document.getElementById('amd-loader');\n    var configUrl = loaderScript.getAttribute('data-config');\n    var bundle  = loaderScript.getAttribute('data-bundle');\n\n    var loadController = function loadController(){\n        var controllerOptions = {};\n        var controllerPath = loaderScript.getAttribute('data-controller');\n        var params = loaderScript.getAttribute('data-params');\n        try{\n            controllerOptions = JSON.parse(params);\n        } catch(err){\n            controllerOptions = {};\n        }\n        window.require([controllerPath], function(controller) {\n            var startController = function startController(){\n                if(!window.started){\n                    window.started = true;\n                    controller.start(controllerOptions);\n                }\n            };\n            document.addEventListener('readystatechange', startController, false);\n            if (document.readyState === 'complete') {\n                startController();\n            }\n        });\n    };\n\n    //always start to load the config\n    window.require([configUrl], function() {\n\n        //define the global loading mechanism\n        if(!window.loadBundles){\n            //keep tracl of loaded bundles, even if require does it,\n            //this prevent some unecessary cycles\n            window.loaded = {};\n\n            /**\n             * Loading entry point for inter bundle dependency,\n             * always take the bundles from the params and window.bundles\n             * @param {String[]} [bundles] - an optional list of bundle to load\n             */\n            window.loadBundles = function loadBundles(bundles){\n                bundles = bundles || [];\n                bundles = bundles.concat(window.bundles)\n                bundles = bundles.filter( function(item, index){\n                    return item && bundles.indexOf(item) === index && window.loaded[item] !== true;\n                });\n                require(bundles, function(){\n                    bundles.forEach( function( item ) {\n                        window.loaded[item] = true;\n                    });\n                    loadController();\n                });\n            }\n        }\n\n        if(bundle || (window.bundles && window.bundles.length)) {\n            window.loadBundles([bundle]);\n        } else {\n            loadController();\n        }\n    });\n})();\n\ndefine(\"loader/bootstrap\", function(){});\n\n","// Licensed under Gnu Public Licence version 2\n// Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\n\ndefine('ltiOutcomeUi/controller/ItemResultPreviewer/itemResultPreviewer',['module', 'util/url', 'core/logger', 'core/request', 'taoItems/previewer/factory'], function (\n    module,\n    urlHelper,\n    loggerFactory,\n    request,\n    previewerFactory\n) {\n    'use strict';\n\n    const logger = loggerFactory('ltiOutcomeUi/ItemResultPreviewer');\n    const dataUrl = urlHelper.route('getVariableFile', 'ItemResultPreviewer', 'ltiOutcomeUi');\n\n    const plugins = [\n        {\n            module: 'ltiOutcomeUi/previewer/plugins/content/scoringHighlighter',\n            bundle: 'ltiOutcomeUi/loader/ltiOutcomeUi.min',\n            category: 'content'\n        }\n    ];\n\n    /**\n     * Requests a file content given the URIs\n     * @param {String} variableUri - The URI of a variable\n     * @param {String} deliveryUri - The URI of a delivery\n     * @returns {Promise}\n     */\n    function requestFileContent(variableUri, deliveryUri) {\n        return request({\n            url: dataUrl,\n            method: 'POST',\n            data: { variableUri, deliveryUri }\n        }).then(response => {\n            // The response may contain more than the expected data,\n            // like the success status, which is not relevant here.\n            // Hence this rewriting.\n            const { data, name, mime } = response;\n            return { data, name, mime };\n        });\n    }\n\n    /**\n     * Makes sure the response contains the file data if it is a file record\n     * @param {Object} response\n     * @param {String} deliveryUri\n     * @returns {Promise}\n     */\n    function refineFileResponse(response, deliveryUri) {\n        const file = response && response.base && response.base.file;\n        if (file && file.uri && !file.data) {\n            return requestFileContent(file.uri, deliveryUri)\n                .then(fileData => {\n                    if (fileData && fileData.data) {\n                        response.base.file = fileData;\n                    } else {\n                        response.base = null;\n                    }\n                })\n                .catch(e => logger.error(e));\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Makes sure the item state contains the file data in the response if it is a file record\n     * @param {Object} state\n     * @param {String} deliveryUri\n     * @returns {Promise}\n     */\n    function refineItemState(state, deliveryUri) {\n        if (!state) {\n            return Promise.resolve(state);\n        }\n\n        const filePromises = Object.keys(state).map(identifier => {\n            const { response } = state[identifier];\n            return refineFileResponse(response, deliveryUri);\n        });\n        return Promise.all(filePromises).then(() => state);\n    }\n\n    return {\n        start: function (config) {\n            var uri = config.uri;\n            var resultIdentifier = config.resultIdentifier;\n            var itemDefinition = config.itemDefinition;\n            var deliveryUri = config.deliveryIdentifier;\n\n            var uri = {\n                uri: uri,\n                resultId: resultIdentifier,\n                itemDefinition: itemDefinition,\n                deliveryUri: deliveryUri\n            };\n\n            let type = config.type;\n\n            refineItemState(config.state, deliveryUri).then(state => {\n                previewerFactory(type, uri, state, {\n                    view: 'scorer',\n                    fullPage: true,\n                    hideActionBars: true,\n                    plugins\n                });\n            });\n        }\n    };\n});\n\n","define('ltiOutcomeUi/controller/routes',{\n    ItemResultPreviewer: {\n        actions: {\n            preview: 'controller/ItemResultPreviewer/itemResultPreviewer'\n        }\n    }\n});\n\n","\ndefine(\"ltiOutcomeUi/loader/ltiOutcomeUi.bundle\", function(){});\n","window.bundles = (window.bundles || []).concat([\"taoItems/loader/taoItems.min\"]);\n"]}